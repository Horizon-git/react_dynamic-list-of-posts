{"version":3,"sources":["PostProvider.tsx","components/PostsList.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","api/posts.ts","components/PostDetails.tsx","UserProvider.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","index.tsx"],"names":["PostContext","React","createContext","posts","setPosts","selectedPost","setSelectedPost","comments","setComments","PostProvider","_ref","children","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","_useState5","_useState6","value","useMemo","_jsx","Provider","PostsList","_useContext","useContext","_jsxs","className","map","post","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","ok","json","Error","client","Loader","NewCommentForm","name","setName","email","setEmail","setBody","_useState7","_useState8","isSubmitting","setIsSubmitting","_useState9","_useState10","isSubmitError","setIsSubmitError","_useState11","_useState12","isNameError","setIsNameError","_useState13","_useState14","isEmailError","setIsEmailError","_useState15","_useState16","isBodyError","setIsBodyError","onSubmit","event","preventDefault","trim","isValidated","newComment","postId","addedComment","currComments","concat","_toConsumableArray","catch","finally","htmlFor","placeholder","classNames","onChange","e","target","PostDetails","showNewCommentForm","setShowNewCommentForm","isCommentLoading","setIsCommentLoading","isCommentError","setIsCommentError","isDeleteError","setIsDeleteError","useEffect","handleDelete","commentId","deletedComment","find","comment","filter","deleteComment","_Fragment","href","UserContext","users","setUsers","selectedUser","setSelectedUser","UserProvider","UserSelector","_selectedUser$name","isActiveDropdown","setIsActiveDropdown","onBlur","role","user","onMouseDown","App","_useContext2","isError","setIsError","isLoading","setIsLoading","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f342ec2d.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { Comment } from './types/Comment';\nimport { Post } from './types/Post';\n\ntype ContextProps = {\n  posts: Post[],\n  setPosts: (newPosts: Post[]) => void,\n  selectedPost: Post | null,\n  setSelectedPost: (newPost: Post | null) => void,\n  comments: Comment[],\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>\n};\n\nexport const PostContext = React.createContext<ContextProps>({\n  posts: [],\n  setPosts: () => {},\n  selectedPost: null,\n  setSelectedPost: () => {},\n  comments: [],\n  setComments: () => {},\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PostProvider: React.FC<Props> = ({ children }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const value = useMemo(() => ({\n    posts,\n    setPosts,\n    selectedPost,\n    setSelectedPost,\n    comments,\n    setComments,\n  }), [posts, selectedPost, comments]);\n\n  return (\n    <PostContext.Provider value={value}>\n      {children}\n    </PostContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\nimport { PostContext } from '../PostProvider';\n\nexport const PostsList: React.FC = () => {\n  const { posts, setSelectedPost, selectedPost } = useContext(PostContext);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">{post.title}</td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {selectedPost?.id !== post.id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => setSelectedPost(post)}\n                  >\n                    Open\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButtonCose\"\n                    className=\"button is-link\"\n                    onClick={() => setSelectedPost(null)}\n                  >\n                    Close\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error('Error');\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useContext, useState } from 'react';\nimport { addComment } from '../api/posts';\nimport { PostContext } from '../PostProvider';\nimport { CommentData } from '../types/Comment';\n\nexport const NewCommentForm: React.FC = () => {\n  const { setComments, selectedPost } = useContext(PostContext);\n\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [body, setBody] = useState<string>('');\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const [isSubmitError, setIsSubmitError] = useState(false);\n  const [isNameError, setIsNameError] = useState<boolean>(false);\n  const [isEmailError, setIsEmailError] = useState<boolean>(false);\n  const [isBodyError, setIsBodyError] = useState<boolean>(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name.trim()) {\n      setIsNameError(true);\n    }\n\n    if (!email.trim()) {\n      setIsEmailError(true);\n    }\n\n    if (!body.trim()) {\n      setIsBodyError(true);\n    }\n\n    const isValidated = !!name.trim() && !!email.trim() && !!body.trim();\n\n    if (!!selectedPost && isValidated) {\n      setIsSubmitting(true);\n\n      const newComment: CommentData = {\n        postId: selectedPost.id,\n        name,\n        email,\n        body,\n      };\n\n      addComment(newComment)\n        .then(addedComment => {\n          setComments(currComments => [...currComments, addedComment]);\n          setBody('');\n        })\n        .catch(() => {\n          setIsSubmitError(true);\n        })\n        .finally(() => setIsSubmitting(false));\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setIsNameError(false);\n    setIsEmailError(false);\n    setIsBodyError(false);\n  };\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    setIsNameError(false);\n  };\n\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value);\n    setIsEmailError(false);\n  };\n\n  const handleBodyChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(e.target.value);\n    setIsBodyError(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isNameError,\n            })}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isEmailError,\n            })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isBodyError,\n            })}\n            value={body}\n            onChange={handleBodyChange}\n          />\n        </div>\n\n        {isBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isSubmitting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={reset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n\n      {isSubmitError && (\n        <div className=\"notification is-danger\">\n          Couldn&apos;t post this comment.\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setIsSubmitError(false)}\n          />\n        </div>\n      )}\n    </form>\n  );\n};\n","/* eslint-disable object-curly-newline */\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { deleteComment, getComments } from '../api/posts';\nimport { PostContext } from '../PostProvider';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nexport const PostDetails: React.FC = () => {\n  const { selectedPost, comments, setComments } = useContext(PostContext);\n\n  const [showNewCommentForm, setShowNewCommentForm] = useState<boolean>(false);\n  const [isCommentLoading, setIsCommentLoading] = useState<boolean>(false);\n  const [isCommentError, setIsCommentError] = useState<boolean>(false);\n  const [isDeleteError, setIsDeleteError] = useState<boolean>(false);\n\n  useEffect(() => {\n    setShowNewCommentForm(false);\n    if (selectedPost) {\n      setIsCommentLoading(true);\n      getComments(selectedPost.id)\n        .then(setComments)\n        .catch(() => setIsCommentError(true))\n        .finally(() => setIsCommentLoading(false));\n    }\n  }, [selectedPost]);\n\n  const handleDelete = (commentId: number) => {\n    setIsDeleteError(false);\n    const deletedComment = comments\n      .find(comment => comment.id === commentId);\n\n    setComments(currComments => currComments\n      .filter(comment => comment.id !== commentId));\n\n    deleteComment(commentId)\n      .catch(() => {\n        setIsDeleteError(true);\n        if (deletedComment) {\n          setComments(currComments => [...currComments, deletedComment]);\n        }\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">{selectedPost?.body}</p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentLoading ? (\n            <Loader />\n          ) : (\n            <>\n              {isCommentError ? (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                  <button\n                    type=\"button\"\n                    className=\"delete\"\n                    aria-label=\"delete\"\n                    onClick={() => setIsCommentError(false)}\n                  />\n                </div>\n              ) : (\n                <>\n                  {!comments.length ? (\n                    <p className=\"title is-4\">No comments yet</p>\n                  ) : (\n                    <>\n                      <p className=\"title is-4\">Comments:</p>\n                      {comments.map((comment) => (\n                        <article\n                          className=\"message is-small\"\n                          data-cy=\"Comment\"\n                          key={comment.id}\n                        >\n                          <div className=\"message-header\">\n                            <a\n                              href={`mailto:${comment.email}`}\n                              data-cy=\"CommentAuthor\"\n                            >\n                              {comment.name}\n                            </a>\n                            <button\n                              data-cy=\"CommentDelete\"\n                              type=\"button\"\n                              className=\"delete is-small\"\n                              aria-label=\"delete\"\n                              onClick={() => handleDelete(comment.id)}\n                            >\n                              delete button\n                            </button>\n                          </div>\n\n                          <div className=\"message-body\" data-cy=\"CommentBody\">\n                            {comment.body}\n                          </div>\n                        </article>\n                      ))}\n                    </>\n                  )}\n                </>\n              )}\n\n              {isDeleteError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Can`t delete this comment\n                  <button\n                    type=\"button\"\n                    className=\"delete\"\n                    aria-label=\"delete\"\n                    onClick={() => setIsDeleteError(false)}\n                  />\n                </div>\n              )}\n\n              {!showNewCommentForm && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setShowNewCommentForm(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n        </div>\n\n        {showNewCommentForm && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport { User } from './types/User';\n\ntype ContextProps = {\n  users: User[],\n  setUsers: (newUsers: User[]) => void,\n  selectedUser: User | null,\n  setSelectedUser: (newUser: User) => void,\n};\n\nexport const UserContext = React.createContext<ContextProps>({\n  users: [],\n  setUsers: () => {},\n  selectedUser: null,\n  setSelectedUser: () => {},\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const UserProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const value = useMemo(() => ({\n    users,\n    setUsers,\n    selectedUser,\n    setSelectedUser,\n  }), [users, selectedUser]);\n\n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useContext, useState } from 'react';\nimport { UserContext } from '../UserProvider';\n\nexport const UserSelector: React.FC = () => {\n  const { users, setSelectedUser, selectedUser } = useContext(UserContext);\n\n  const [isActiveDropdown, setIsActiveDropdown] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isActiveDropdown })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onBlur={() => setIsActiveDropdown(false)}\n          onClick={() => setIsActiveDropdown(!isActiveDropdown)}\n        >\n          <span>{selectedUser?.name ?? 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => (\n            <a\n              key={user.id}\n              onMouseDown={() => setSelectedUser(user)}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item',\n                { 'is-active': user.id === selectedUser?.id })}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { UserContext } from './UserProvider';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { PostContext } from './PostProvider';\n\nexport const App: React.FC = () => {\n  const { setUsers, selectedUser } = useContext(UserContext);\n  const { setPosts, selectedPost, posts } = useContext(PostContext);\n\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoading(true);\n      getPosts(selectedUser.id)\n        .then(setPosts)\n        .catch(() => setIsError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser ? (\n                  <p data-cy=\"NoSelectedUser\">No user selected</p>\n                ) : (\n                  <>\n                    {isLoading ? (\n                      <Loader />\n                    ) : (\n                      <>\n                        {isError ? (\n                          <div\n                            className=\"notification is-danger\"\n                            data-cy=\"PostsLoadingError\"\n                          >\n                            Something went wrong!\n                          </div>\n                        ) : (\n                          <>\n                            {!posts.length ? (\n                              <div\n                                className=\"notification is-warning\"\n                                data-cy=\"NoPostsYet\"\n                              >\n                                No posts yet\n                              </div>\n                            ) : (\n                              <PostsList />\n                            )}\n                          </>\n                        )}\n                      </>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","/* eslint-disable object-curly-newline */\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { PostProvider } from './PostProvider';\nimport { UserProvider } from './UserProvider';\n\nReactDOM.render(\n  <UserProvider>\n    <PostProvider>\n      <App />\n    </PostProvider>\n  </UserProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}